# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt

# Provides mechanism for installing whole packages into a specific directory
# structure. This is opposed to the 'install' rule, that installs a number of
# targets to a single directory, and does not care about directory structure at
# all.

# Example usage:
#
#   multiarch.install boost : <binaries>
#                           : <libraries>
#                           : <headers>
#                           : <properties> ;
#
# This will install binaries, libraries and headers to the 'proper' location,
# given by command line options --prefix, --exec-prefix, --bindir, --libdir and
# --includedir.
#
# The rule is just a convenient wrapper, avoiding the need to define several
# 'install' targets.
#
# The only install-related feature is <install-source-root>. It will apply to
# headers only and if present, paths of headers relatively to source root will
# be retained after installing. If it is not specified, then "." is assumed, so
# relative paths in headers are always preserved.

import "class" : new ;
import option ;
import project ;
import feature ;
import property ;
import stage ;
import targets ;
import modules ;
import common ;
import string ;
import set ;
import os ;
import sequence ;

.default-architecture = [ SHELL "dpkg-architecture -qDEB_BUILD_ARCH" ] ;
.default-architecture = [ string.words "$(.default-architecture)" ] ;
.architectures = [ SHELL "dpkg-architecture -L" ] ;
.architectures = [ string.words "$(.architectures)" ] ;
.architectures = [ set.difference $(.architectures) : $(.default-architecture) ] ;

feature.feature target-architecture : $(.default-architecture) $(.architectures) : composite propagated ;
feature.feature kernel : : optional propagated ;
feature.feature abi : : optional propagated ;
feature.feature endian : little big : optional propagated ;
feature.feature cpu : : optional propagated ;
feature.feature multiarch : : optional propagated ;
feature.feature package : : optional free ;

###Â BEGIN GENERATED CODE
### END GENERATED CODE

local rule supported-architectures ( ) {
  local architectures ;

  for arch in [ feature.values target-architecture ] {
    local properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    local triplet = [ property.select <multiarch> : $(properties) ] ;
    triplet = $(triplet:G=) ;

    if $(triplet) {
      architectures = $(architectures) $(arch) ;
    }
  }

  return $(architectures) ;
}

local rule get-prefix ( properties * ) {
  local stagedir = [ option.get stagedir ] ;
  stagedir = $(stagedir:G=) ;

  local triplet = [ property.select <multiarch> : $(properties) ] ;
  triplet = $(triplet:G=) ;

  local prefix = [ option.get prefix : [ property.select <install-default-prefix> : $(properties) ] ] ;
  prefix = $(prefix:G=) ;

  # Or some likely defaults if neither is given.
  if ! $(prefix) {
    if [ modules.peek : NT ] { prefix = C:\\usr\\local ; }
    else if [ modules.peek : UNIX ] { prefix = /usr/local ; }
  }

  local location = "$(stagedir)/$(triplet)$(prefix)" ;
  if ( ! $(stagedir) || $(stagedir) = "/" ) {
    location = "$(prefix)" ;
  }

  return $(location) ;
}

local rule library-search-property ( properties * ) {
  local home = [ os.home-directories ] ;

  local address-model = [ property.select <address-model> : $(properties) ] ;
  address-model = $(address-model:G=) ;
  local triplet = [ property.select <multiarch> : $(properties) ] ;
  triplet = $(triplet:G=) ;

  local search      = "$(home)/lib/$(triplet)" ;
  search = "$(search)&&$(home)/lib$(address-model)" ;
  search = "$(search)&&/usr/local/lib/$(triplet)" ;
  search = "$(search)&&/usr/local/lib$(address-model)" ;
  search = "$(search)&&/usr/lib/$(triplet)" ;
  search = "$(search)&&/usr/lib$(address-model)" ;

  return $(search) ;
}

rule library-search ( ) {
  local properties = [ feature.expand-composites <target-architecture>$(.default-architecture) ] ;
  local search = [ library-search-property $(properties) ] ;
  out-properties = <search>$(search) ;

  for arch in [ supported-architectures ] {
    properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    search = [ library-search-property $(properties) ] ;
    out-properties = $(out-properties) <target-architecture>$(arch):<search>$(search) ;
  }

  return $(out-properties) ;
}

local rule library-location-property ( properties * : package ? ) {
  local prefix = [ get-prefix $(properties) ] ;

  local triplet = [ property.select <multiarch> : $(properties) ] ;
  triplet = $(triplet:G=) ;

  local libdir = [ option.get libdir : $(prefix)/lib ] ;
  local location = "$(libdir)/$(triplet)/$(package)" ;
  if ! $(package) {
    location = "$(libdir)/$(triplet)" ;
  }

  return $(location) ;
}

rule library-location ( package ? ) {
  local properties = [ feature.expand-composites <target-architecture>$(.default-architecture) ] ;
  local location = [ library-location-property $(properties) : $(package) ] ;
  out-properties = <location>$(location) ;

  for arch in [ supported-architectures ] {
    properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    location = [ library-location-property $(properties) : $(package) ] ;
    out-properties = $(out-properties) <target-architecture>$(arch):<location>$(location) ;
  }

  return $(out-properties) ;
}

local rule binary-location-property ( properties * : package ? ) {
  local prefix = [ get-prefix $(properties) ] ;

  local triplet = [ property.select <multiarch> : $(properties) ] ;
  triplet = $(triplet:G=) ;

  local bindir = [ option.get bindir : $(prefix)/bin ] ;
  local libdir = [ option.get libdir : $(prefix)/lib ] ;
  local location = "$(libdir)/$(triplet)/$(package)" ;
  if ! $(package) {
    location = "$(bindir)" ;
  }

  return $(location) ;
}

rule binary-location ( package ? ) {
  local properties = [ feature.expand-composites <target-architecture>$(.default-architecture) ] ;
  local location = [ binary-location-property $(properties) : $(package) ] ;
  out-properties = <location>$(location) ;

  for arch in [ supported-architectures ] {
    properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    location = [ binary-location-property $(properties) : $(package) ] ;
    out-properties = $(out-properties) <target-architecture>$(arch):<location>$(location) ;
  }

  return $(out-properties) ;
}

local rule header-location-property ( properties * : package ? ) {
  local prefix = [ get-prefix $(properties) ] ;

  local includedir = [ option.get includedir : $(prefix)/include ] ;
  local location = "$(includedir)/$(package)" ;
  if ! $(package) {
    location = "$(includedir)" ;
  }

  return $(location) ;
}

rule header-location ( package ? ) {
  local header-subdir = [ property.select <install-header-subdir> : $(properties) ] ;
  header-subdir = /$(header-subdir:G=) ;
  header-subdir ?= "" ;

  local properties = [ feature.expand-composites <target-architecture>$(.default-architecture) ] ;
  local location = [ header-location-property $(properties) : $(package) ] ;
  out-properties = <location>$(location)$(header-subdir) ;

  for arch in [ supported-architectures ] {
    properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    location = [ header-location-property $(properties) : $(package) ] ;
    out-properties = $(out-properties) <target-architecture>$(arch):<location>$(location)$(header-subdir) ;
  }

  return $(out-properties) ;
}

local rule data-location-property ( properties * : package ? ) {
  local prefix = [ get-prefix $(properties) ] ;

  local datadir = [ option.get datarootdir : $(prefix)/share ] ;
  local location = "$(datadir)/$(package)" ;
  if ! $(package) {
    location = "$(datadir)" ;
  }

  return $(location) ;
}

rule data-location ( package ? ) {
  local properties = [ feature.expand-composites <target-architecture>$(.default-architecture) ] ;
  local location = [ data-location-property $(properties) : $(package) ] ;
  out-properties = <location>$(location) ;

  for arch in [ supported-architectures ] {
    properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    location = [ data-location-property $(properties) : $(package) ] ;
    out-properties = $(out-properties) <target-architecture>$(arch):<location>$(location) ;
  }

  return $(out-properties) ;
}

rule build ( name package ? : binaries * : libraries * : properties * ) {
  package ?= $(name) ;

  alias $(name)-lib-shared
      : $(libraries)
      : $(properties)
        <link>shared ;
  alias $(name)-lib-static
      : $(libraries)
      : $(properties)
        <link>static ;

  alias $(name)
      : $(binaries)
        $(name)-lib-shared
        $(name)-lib-static
      : $(properties) ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-lib-shared
             $(name)-lib-static
             $(binaries)
             $(libraries) ;
  }
}

rule install ( name : binaries * : libraries * : headers * : properties * ) {
  package = [ property.select <package> : $(properties) ] ;
  package = $(package:G=) ;

  if [ MATCH --prefix=(.*) : [ modules.peek : ARGV ] ] {
    # If --prefix is explicitly specified on the command line,
    # then we need wipe away any settings of libdir/includir that
    # is specified via options in config files.
    option.set bindir : ;
    option.set libdir : ;
    option.set includedir : ;
  }

  # If <install-source-root> is not specified, all headers are installed to prefix/include, no matter what their
  # relative path is. Sometimes that is what is needed.
  local install-source-root = [ property.select <install-source-root> : $(properties) ] ;
  install-source-root = $(install-source-root:G=) ;
  properties = [ property.change $(properties) : <install-source-root> ] ;

  stage.install $(name)-bin
              : $(binaries)
              : $(properties)
                [ binary-location $(package) ] ;

  stage.install $(name)-lib-shared
              : $(libraries)
              : $(properties)
                [ library-location $(package) ]
                <install-type>SHARED_LIB
                <link>shared ;
  stage.install $(name)-lib-static
              : $(libraries)
              : $(properties)
                [ library-location $(package) ]
                <install-type>STATIC_LIB
                <link>static ;

  stage.install $(name)-headers
              : $(headers)
              : $(properties)
                [ header-location $(package) ]
                <install-source-root>$(install-source-root) ;

  alias $(name)
      : $(name)-bin
        $(name)-lib-shared
        $(name)-lib-static
        $(name)-headers ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-bin
             $(name)-lib-shared
             $(name)-lib-static
             $(name)-headers ;
  }
}

rule install-data ( name : data * : properties * ) {
  package = [ property.select <package> : $(properties) ] ;
  package = $(package:G=) ;

  if [ MATCH --prefix=(.*) : [ modules.peek : ARGV ] ] {
    # If --prefix is explicitly specified on the command line, then we need wipe away any settings of datarootdir
    option.set datarootdir : ;
  }

  # If <install-source-root> is not specified, all headers are installed to prefix/include, no matter what their
  # relative path is. Sometimes that is what is needed.
  local install-source-root = [ property.select <install-source-root> : $(properties) ] ;
  install-source-root = $(install-source-root:G=) ;
  properties = [ property.change $(properties) : <install-source-root> ] ;

  stage.install $(name)-data
              : $(data)
              : $(properties)
                [ data-location $(package) ]
                <install-source-root>$(install-source-root) ;

  alias $(name)
      : $(name)-data ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-data ;
  }
}
