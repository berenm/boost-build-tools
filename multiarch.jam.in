# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt

# Provides mechanism for installing whole packages into a specific directory
# structure. This is opposed to the 'install' rule, that installs a number of
# targets to a single directory, and does not care about directory structure at
# all.

# Example usage:
#
#   multiarch.install boost : <binaries>
#                           : <libraries>
#                           : <headers>
#                           : <properties> ;
#
# This will install binaries, libraries and headers to the 'proper' location,
# given by command line options --prefix, --exec-prefix, --bindir, --libdir and
# --includedir.
#
# The rule is just a convenient wrapper, avoiding the need to define several
# 'install' targets.
#
# The only install-related feature is <install-source-root>. It will apply to
# headers only and if present, paths of headers relatively to source root will
# be retained after installing. If it is not specified, then "." is assumed, so
# relative paths in headers are always preserved.

import "class" : new ;
import option ;
import project ;
import feature ;
import property ;
import stage ;
import targets ;
import modules ;
import common ;
import string ;
import set ;
import os ;
import sequence ;

.default-architecture = [ SHELL "dpkg-architecture -qDEB_BUILD_ARCH" ] ;
.default-architecture = [ string.words "$(.default-architecture)" ] ;
.architectures = [ SHELL "dpkg-architecture -L" ] ;
.architectures = [ string.words "$(.architectures)" ] ;
.architectures = [ set.difference $(.architectures) : $(.default-architecture) ] ;

feature.feature target-architecture : $(.default-architecture) $(.architectures) : composite ;
feature.feature kernel : : optional propagated ;
feature.feature abi : : optional propagated ;
feature.feature endian : little big : optional propagated ;
feature.feature cpu : : free ;
feature.feature multiarch : : free ;

###Â BEGIN GENERATED CODE
### END GENERATED CODE

local rule search-library-property ( properties * ) {
  local home = [ os.home-directories ] ;

  local address-model = [ property.select <address-model> : $(properties) ] ;
  local triplet = [ property.select <multiarch> : $(properties) ] ;
  local search      = "$(home)/lib/$(triplet:G=)" ;
  search = "$(search)&&$(home)/lib$(address-model:G=)" ;
  search = "$(search)&&/usr/local/lib/$(triplet:G=)" ;
  search = "$(search)&&/usr/local/lib$(address-model:G=)" ;
  search = "$(search)&&/usr/lib/$(triplet:G=)" ;
  search = "$(search)&&/usr/lib$(address-model:G=)" ;

  return $(search) ;
}

rule search-path ( ) {
  local properties = [ feature.expand-composites <target-architecture>$(.default-architecture) ] ;
  local search = [ search-library-property $(properties) ] ;
  out-properties = <search>$(search) ;

  for arch in [ feature.values target-architecture ] {
    properties = [ feature.expand-composites <target-architecture>$(arch) ] ;
    search = [ search-library-property $(properties) ] ;
    out-properties = $(out-properties) <target-architecture>$(arch):<search>$(search) ;
  }

  return $(out-properties) ;
}

rule build ( name package-name ? : binaries * : libraries * : requirements * ) {
  local properties = [ feature.expand-composites [ feature.add-defaults $(requirements) ] ] ;
  package-name ?= $(name) ;

  alias $(name)-lib-shared
      : $(libraries)
      : $(requirements)
        <link>shared ;
  alias $(name)-lib-static
      : $(libraries)
      : $(requirements)
        <link>static ;

  alias $(name)
      : $(binaries)
        $(name)-lib-shared
        $(name)-lib-static
      : $(requirements) ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-lib-shared
             $(name)-lib-static
             $(binaries)
             $(libraries) ;
  }
}

rule install ( name package-name ? : binaries * : libraries * : headers * : requirements * ) {
  local properties = [ feature.expand-composites [ feature.add-defaults $(requirements) ] ] ;
  package-name ?= $(name) ;

  if [ MATCH --prefix=(.*) : [ modules.peek : ARGV ] ] {
    # If --prefix is explicitly specified on the command line,
    # then we need wipe away any settings of libdir/includir that
    # is specified via options in config files.
    option.set bindir : ;
    option.set libdir : ;
    option.set includedir : ;
  }

  # If <install-source-root> is not specified, all headers are installed to prefix/include, no matter what their
  # relative path is. Sometimes that is what is needed.
  local install-source-root = [ property.select <install-source-root> : $(requirements) ] ;
  install-source-root = $(install-source-root:G=) ;
  requirements = [ property.change $(requirements) : <install-source-root> ] ;

  local install-header-subdir = [ property.select <install-header-subdir> : $(requirements) ] ;
  install-header-subdir = /$(install-header-subdir:G=) ;
  install-header-subdir ?= "" ;
  requirements = [ property.change $(requirements) : <install-header-subdir> ] ;

  # First, figure out all locations. Use the default if no prefix option given.
  local prefix = [ get-prefix $(name) : $(requirements) ] ;

  # Binaries.
  local bin-locate = [ option.get bindir : $(prefix)/bin ] ;

  # Object code libraries.
  local triplet = [ property.select <multiarch> : $(properties) ] ;
  local lib-locate = [ option.get libdir : $(prefix)/lib/$(triplet:G=) ] ;

  # Source header files.
  local include-locate = [ option.get includedir : $(prefix)/include ] ;

  stage.install $(name)-bin
              : $(binaries)
              : $(requirements)
                <location>$(bin-locate) ;

  stage.install $(name)-lib-shared
              : $(libraries)
              : $(requirements)
                <location>$(lib-locate)
                <install-type>SHARED_LIB
                <link>shared ;
  stage.install $(name)-lib-static
              : $(libraries)
              : $(requirements)
                <location>$(lib-locate)
                <install-type>STATIC_LIB
                <link>static ;

  stage.install $(name)-headers
              : $(headers)
              : $(requirements)
                <location>$(include-locate)$(install-header-subdir)
                <install-source-root>$(install-source-root) ;

  alias $(name)
      : $(name)-bin
        $(name)-lib-shared
        $(name)-lib-static
        $(name)-headers ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-bin
             $(name)-lib-shared
             $(name)-lib-static
             $(name)-headers ;
  }
}

rule install-data ( name package-name ? : data * : requirements * ) {
  package-name ?= $(name) ;

  if [ MATCH --prefix=(.*) : [ modules.peek : ARGV ] ] {
    # If --prefix is explicitly specified on the command line, then we need wipe away any settings of datarootdir
    option.set datarootdir : ;
  }

  local prefix = [ get-prefix $(package-name) : $(requirements) ] ;
  local datadir = [ option.get datarootdir : $(prefix)/share ] ;

  stage.install $(target-name)
              : $(data)
              : $(requirements) <location>$(datadir)/$(package-name) ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(target-name) ;
  }
}

local rule get-prefix ( package-name : requirements * ) {
  local prefix = [ option.get prefix : [ property.select <install-default-prefix> : $(requirements) ] ] ;

  # Remove ./ in prefix by
  prefix = $(prefix:G=) ;
  requirements = [ property.change $(requirements) : <install-default-prefix> ] ;

  # Or some likely defaults if neither is given.
  if ! $(prefix) {
    if [ modules.peek : NT ] { prefix = C:\\$(package-name) ; }
    else if [ modules.peek : UNIX ] { prefix = /usr/local ; }
  }

  return $(prefix) ;
}
